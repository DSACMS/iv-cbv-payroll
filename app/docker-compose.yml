services:
  postgres:
    image: postgres:14-alpine
    hostname: postgres-db
    command: postgres -c "log_lock_waits=on" -N 1000 -c "fsync=off"
    environment:
      POSTGRES_PASSWORD: secret123
      POSTGRES_USER: app
    healthcheck:
      test: "pg_isready --username=app"
      timeout: 10s
      retries: 20
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - .docker/db/init-postgres.sql:/docker-entrypoint-initdb.d/init-postgres.sql

  # Rails app
  # Configured for "development" RAILS_ENV
  app_rails:
    tty: true
    build:
      context: .
      target: release
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file: .env.development.local
    environment:
      - RAILS_MASTER_KEY=d2c80bf25bbf905cee94193b29ada6ac
      - RAILS_LOG_TO_STDOUT=true
      - DOCKERIZED=true
      - PRODUCTION_LOCAL=true
      - DB_HOST=postgres
      - DB_USERNAME=app
      - DB_PASSWORD=secret123
      - DB_NAME=app
      - REDIS_URL=redis://redis:6379/1
      - RAILS_BINDING=0.0.0.0
      - RAILS_ENV=production
      - DOMAIN_NAME=localhost
      - AWS_REGION=us-east-1
    ports:
      - 3000:3000
      - 1234:1234
    volumes:
      - ./:/rails
      # Use named volumes for directories that the container should use the guest
      # machine's dir instead of the host machine's dir, which may be divergent.
      # This is especially true for any dependency or temp directories.
      - app_rails_nodemodules:/rails/node_modules
      - app_rails_tmp:/rails/tmp
      - app_rails_storage:/rails/storage   
  redis:
    image: redis:alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  postgres_data:
  app_rails_nodemodules:
  app_rails_tmp:
  app_rails_storage:
  redis_data: