#!/bin/bash
# -----------------------------------------------------------------------------
# Register webhooks
# 1. Update the application's task definition with the latest build, but
#    do not update the service
# 2. Run the "register-webhooks" command in the container as a new task
#
# Positional parameters:
#   app_name (required) – the name of subdirectory of /infra that holds the
#     application's infrastructure code.
#   image_tag (required) – the tag of the latest build
#   environment (required) – the name of the application environment (e.g. dev,
#     staging, prod)
# -----------------------------------------------------------------------------

set -euo pipefail

app_name="$1"
image_tag="$2"
environment="$3"

echo "=========================="
echo "Registering webhooks"
echo "=========================="
echo "Input parameters"
echo "  app_name=${app_name}"
echo "  image_tag=${image_tag}"
echo "  environment=${environment}"
echo

./bin/terraform-init "infra/${app_name}/service" "${environment}"
webhook_registrar_role_arn=$(terraform -chdir="infra/${app_name}/service" output -raw webhook_registrar_role_arn)
domain_name=$(terraform -chdir="infra/${app_name}/service" output -raw domain_name)

echo
echo "::group::Step 1. Update task definition without updating service"

TF_CLI_ARGS_apply="-input=false -auto-approve -var=image_tag=${image_tag}
  -target=module.service.aws_ecs_task_definition.app
  -target=module.service.aws_iam_role_policy.task_executor" \
  make infra-update-app-service APP_NAME="${app_name}" ENVIRONMENT="${environment}"

echo "::endgroup::"
echo
echo 'Step 2. Run "register-webhooks" command'

command='["register-webhooks"]'

environment_variables=$(cat << EOF
[{ "name" : "DOMAIN_NAME", "value" : "${domain_name}" }]
EOF
)

./bin/run-command --task-role-arn "${webhook_registrar_role_arn}" --environment-variables "${environment_variables}" "${app_name}" "${environment}" "${command}" 